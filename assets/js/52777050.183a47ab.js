"use strict";(self.webpackChunkpulsar_docs=self.webpackChunkpulsar_docs||[]).push([[154],{4238:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=s(6070),t=s(1503);const o={},a="Routing",i={id:"Concepts/routing",title:"Routing",description:"Basic Routing",source:"@site/docs/04-Concepts/01-routing.md",sourceDirName:"04-Concepts",slug:"/Concepts/routing",permalink:"/docs/read/Concepts/routing",draft:!1,unlisted:!1,editUrl:"https://github.com/pulsar-http/docs/tree/main/docs/04-Concepts/01-routing.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example: Hello world!",permalink:"/docs/read/hello-world-tutorial/"},next:{title:"Responses",permalink:"/docs/read/Concepts/responses"}},d={},l=[{value:"Basic Routing",id:"basic-routing",level:2},{value:"Route with Parameters",id:"route-with-parameters",level:2},{value:"Route Groups",id:"route-groups",level:2},{value:"Route body validation + parsing",id:"route-body-validation--parsing",level:2},{value:"Route response validation",id:"route-response-validation",level:2},{value:"Example",id:"example",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"routing",children:"Routing"})}),"\n",(0,r.jsx)(n.h2,{id:"basic-routing",children:"Basic Routing"}),"\n",(0,r.jsx)(n.p,{children:"Define routes using HTTP methods like GET, POST, etc."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { router, json, start } from "@pulsar-http/core";\n\nconst { get } = router;\n\nstart({\n    routes: [\n        get(\'/\', async () => json({ message: "Welcome to Pulsar!" }))\n    ]\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"route-with-parameters",children:"Route with Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["Define routes with parameters. Use ",(0,r.jsx)(n.code,{children:"pathParams"})," to access them."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { router, json, start } from \"@pulsar-http/core\";\n\nconst { get } = router;\n\nstart({\n    routes: [\n        get('/:name', async ({ request, pathParams }) => {\n            return json({ message: `Hello, ${pathParams.name}` });\n        })\n    ]\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Example: ",(0,r.jsx)(n.code,{children:"/John"})," will respond with ",(0,r.jsx)(n.code,{children:"Hello, John"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"route-groups",children:"Route Groups"}),"\n",(0,r.jsx)(n.p,{children:"Group related routes under a common prefix."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { router, file, start } from \"@pulsar-http/core\";\n\nconst { get, post } = router;\n\nstart({\n    routes: [\n        get('/', async () => file(\"/public/hello-world.html\")),\n        {\n            path: \"/api/v1\",\n            routes: [\n                get('/users', handleGetUsers),\n                post('/users', handleCreateUser),\n                get('/users/:id', handleGetUser)\n            ]\n        }\n    ]\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["All ",(0,r.jsx)(n.code,{children:"/api/v1"})," routes share the prefix."]}),"\n",(0,r.jsx)(n.h2,{id:"route-body-validation--parsing",children:"Route body validation + parsing"}),"\n",(0,r.jsxs)(n.p,{children:["Pulsar uses ",(0,r.jsx)(n.a,{href:"https://npmjs.com/package/zod",children:"zod"})," for body validation and parsing."]}),"\n",(0,r.jsx)(n.p,{children:"You can pass a schema to a route to validate and parse the body automatically."}),"\n",(0,r.jsxs)(n.p,{children:["The body will then be available in the ",(0,r.jsx)(n.code,{children:"body"})," argument of the handler."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["If you don't pass a schema to a route, the body will be available as usual in the ",(0,r.jsx)(n.code,{children:"request"})," object."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { router, json, start, type RouterHandler } from "@pulsar-http/core";\nimport zod from "zod";\n\nconst { post } = router;\n\nconst userSchema = zod.object({\n    name: zod.string(),\n    age: zod.number()\n});\n\ntype User = zod.infer<typeof userSchema>;\n\nconst handleCreateUser: RouterHandler<User> = async ({ body }) => {\n    return json({ message: `User ${body.name} created! The user is ${body.age} years old.` });\n}\n\nstart({\n    routes: [\n        post(\'/users\', handleCreateUser, { bodySchema: userSchema })\n    ]\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"route-response-validation",children:"Route response validation"}),"\n",(0,r.jsx)(n.p,{children:"As for the body, you can also validate the response of a route using a schema."}),"\n",(0,r.jsx)(n.p,{children:"If the response doesn't match the schema, Pulsar will automatically return a 500 error describing the issue."}),"\n",(0,r.jsx)(n.p,{children:"This is useful to ensure that your API is always returning the expected data."}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { router, json, start, type RouterHandler } from \"@pulsar-http/core\";\nimport zod from \"zod\";\n\nconst { post } = router;\n\nconst userSchema = zod.object({\n    name: zod.string(),\n    age: zod.number()\n});\n\nconst usersResponseSchema = zod.object({\n    users: zod.array(userSchema)\n}).strict();\n\ntype User = zod.infer<typeof userSchema>;\n\nconst handleCreateUser: RouterHandler<User> = async ({ body }) => {\n    return json({ message: `User ${body.name} created! The user is ${body.age} years old.` });\n}\n\nstart({\n    routes: [\n        get('/users', async () => json({ users: [/*fill with users*/] }), { responseSchema: usersResponseSchema }),\n        post('/users', handleCreateUser, { bodySchema: userSchema })\n    ]\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Routes are defined using the ",(0,r.jsx)(n.code,{children:"router"})," object."]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"get()"}),", ",(0,r.jsx)(n.code,{children:"post()"}),", etc. to define routes for different HTTP methods."]}),"\n",(0,r.jsx)(n.li,{children:"Handlers options allow you to access request, path parameters, body, etc."}),"\n",(0,r.jsx)(n.li,{children:"You can group related routes under a common prefix."}),"\n",(0,r.jsx)(n.li,{children:"You can validate and parse the body of a route using a schema."}),"\n",(0,r.jsx)(n.li,{children:"You can validate the response of a route using a schema."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1503:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var r=s(758);const t={},o=r.createContext(t);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);